!function(e){function t(t){for(var o,i,s=t[0],c=t[1],l=t[2],d=0,h=[];d<s.length;d++)i=s[d],Object.prototype.hasOwnProperty.call(r,i)&&r[i]&&h.push(r[i][0]),r[i]=0;for(o in c)Object.prototype.hasOwnProperty.call(c,o)&&(e[o]=c[o]);for(u&&u(t);h.length;)h.shift()();return a.push.apply(a,l||[]),n()}function n(){for(var e,t=0;t<a.length;t++){for(var n=a[t],o=!0,s=1;s<n.length;s++){var c=n[s];0!==r[c]&&(o=!1)}o&&(a.splice(t--,1),e=i(i.s=n[0]))}return e}var o={},r={0:0},a=[];function i(t){if(o[t])return o[t].exports;var n=o[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=e,i.c=o,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)i.d(n,o,function(t){return e[t]}.bind(null,o));return n},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="";var s=window.webpackJsonp=window.webpackJsonp||[],c=s.push.bind(s);s.push=t,s=s.slice();for(var l=0;l<s.length;l++)t(s[l]);var u=c;a.push([11,1]),n()}([,,,,function(e,t,n){e.exports=function(){return new Worker(n.p+"3fe4d47da7c9ea65a0f0.worker.js")}},,function(e,t,n){var o=n(2),r=n(7);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var a={insert:"head",singleton:!1};o(r,a);e.exports=r.locals||{}},function(e,t,n){(t=n(3)(!1)).push([e.i,"body {\n  margin: 0\n}\n\n#app {\n  align-items: center;\n  display: flex;\n  height: 100vh;\n  justify-content: center;\n  z-index: 1;\n}\n\n.render-canvas {\n  box-shadow: 3px 3px 20px 0px rgba(0, 0, 0, 0.15);\n}\n\n#params-container {\n  position: absolute;\n  right: 1em;\n  top: 1em;\n  z-index: 100;\n}\n",""]),e.exports=t},function(e,t,n){var o=n(2),r=n(9);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var a={insert:"head",singleton:!1};o(r,a);e.exports=r.locals||{}},function(e,t,n){(t=n(3)(!1)).push([e.i,"\n:root {\n  /* Base colors */\n  --tp-base-background-color: hsl(230deg, 5%, 95%);\n  --tp-base-shadow-color: hsla(0, 0%, 0%, 0.1);\n\n  /* Button-like control colors */\n  --tp-button-background-color: hsl(230deg, 5%, 70%);\n  --tp-button-background-color-active: hsl(230deg, 5%, 55%);\n  --tp-button-background-color-focus: hsl(230deg, 5%, 60%);\n  --tp-button-background-color-hover: hsl(230deg, 5%, 65%);\n  --tp-button-foreground-color: hsl(230deg, 5%, 20%);\n\n  /* Folder colors */\n  --tp-folder-background-color: hsl(230deg, 5%, 80%);\n  --tp-folder-background-color-active: hsl(230deg, 5%, 65%);\n  --tp-folder-background-color-focus: hsl(230deg, 5%, 70%);\n  --tp-folder-background-color-hover: hsl(230deg, 5%, 75%);\n  --tp-folder-foreground-color: var(--tp-input-foreground-color);\n\n  /* Input control colors */\n  --tp-input-background-color: hsl(230deg, 5%, 91%);\n  --tp-input-background-color-active: hsl(230deg, 5%, 84%);\n  --tp-input-background-color-focus: hsl(230deg, 5%, 85%);\n  --tp-input-background-color-hover: hsl(230deg, 5%, 87%);\n  --tp-input-foreground-color: hsl(230deg, 5%, 30%);\n  --tp-input-guide-color: hsla(230deg, 5%, 30%, 10%);\n\n  /* Monitor control colors */\n  --tp-monitor-background-color: var(--tp-input-background-color);\n  --tp-monitor-foreground-color: hsl(230deg, 5%, 60%);\n\n  /* Misc */\n  --tp-label-foreground-color: hsl(230deg, 5%, 50%);\n  --tp-separator-color: hsl(230deg, 5%, 85%);\n}\n",""]),e.exports=t},,function(e,t,n){"use strict";n.r(t);n(6);var o=n(17),r=n(16),a=n(18);function i(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}var s=function(){function e(t,n,i){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.w=n,this.h=i,this.canvasElement=t,this.ctx=t.getContext("2d"),this.twoPi=2*Math.PI,this._minSeekRadius=1,this._maxSeekRadius=1,this.strokeScale=Object(o.a)().domain([this._minSeekRadius,this._maxSeekRadius]).rangeRound([2,6]),this.strokeColorScale=Object(r.a)(a.a),this._initializeCanvas()}var t,n,s;return t=e,(n=[{key:"clear",value:function(){this._initializeCanvas()}},{key:"line",value:function(e,t){var n=this.strokeScale(t.r);this.ctx.lineWidth=n,this.ctx.strokeStyle=this.strokeColorScale(t.treeId),this.ctx.beginPath(),this.ctx.moveTo(e.x,e.y),this.ctx.lineTo(t.x,t.y),this.ctx.stroke()}},{key:"node",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:3;this.ctx.fillStyle=this.style.node.fillColor,this.ctx.beginPath(),this.ctx.arc(e.x,e.y,t,0,this.twoPi),this.ctx.closePath(),this.ctx.fill()}},{key:"root",value:function(e){this.ctx.fillStyle=this.style.root.fillColor,this.ctx.beginPath(),this.ctx.arc(e.x,e.y,6,0,this.twoPi),this.ctx.closePath(),this.ctx.fill(),this.node(e)}},{key:"done",value:function(){}},{key:"_initializeCanvas",value:function(){this.canvasElement.width=this.w,this.canvasElement.height=this.h;var e=window.devicePixelRatio||1;this.canvasElement.style.width=this.canvasElement.width+"px",this.canvasElement.style.height=this.canvasElement.height+"px",this.canvasElement.width=this.canvasElement.width*e,this.canvasElement.height=this.canvasElement.height*e,this.ctx.scale(e,e),this.ctx.fillStyle="white",this.ctx.rect(0,0,this.w,this.h),this.ctx.fill(),this.ctx.lineCap="round"}},{key:"minSeekRadius",set:function(e){this._minSeekRadius=e,this.strokeScale.domain([this._minSeekRadius,this._maxSeekRadius])}},{key:"maxSeekRadius",set:function(e){this._maxSeekRadius=e,this.strokeScale.domain([this._minSeekRadius,this._maxSeekRadius])}},{key:"style",get:function(){return{root:{fillColor:"red"},node:{fillColor:"black"},line:{strokeColor:"black"}}}}])&&i(t.prototype,n),s&&i(t,s),e}(),c=n(4),l=n.n(c),u=(n(8),n(10));function d(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function h(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?d(Object(n),!0).forEach((function(t){p(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):d(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var f={maxSeekRadius:15,minSeekRadius:7,seekRadiusDecay:.93,numRoots:5,maxBranchAttempts:20,angleMax:160,branchSpacing:2.7},g=new u({title:"Parameters",container:document.getElementById("params-container")});g.addInput(f,"maxSeekRadius",{step:1}),g.addInput(f,"minSeekRadius",{step:1}),g.addInput(f,"seekRadiusDecay",{min:0,max:1,step:.01}),g.addInput(f,"numRoots",{step:1}),g.addInput(f,"maxBranchAttempts",{step:1}),g.addInput(f,"angleMax",{min:90,max:180,step:1}),g.addInput(f,"branchSpacing",{min:2,max:3,step:.1});var b,m=g.addButton({title:"Grow"}),v=((b=document.createElement("canvas")).id="render-canvas",b.classList.add("render-canvas"),b);document.getElementById("app").appendChild(v);var k=new s(v,600,600),x=y(h({height:600,width:600},f));function y(e){var t=new l.a;return t.onmessage=w,t.postMessage({cmd:"run",params:e}),t}function w(e){switch(e.data.cmd){case"render:line":k.line(e.data.from,e.data.to);break;case"render:node":k.node(e.data.center,e.data.center.radius);break;case"render:root":k.root(e.data.center);break;case"render:setMinSeekRadius":k.minSeekRadius=e.data.radius;break;case"render:setMaxSeekRadius":k.maxSeekRadius=e.data.radius;break;default:console.log("[index] unknown command ".concat(e.data.cmd,", data: ").concat(JSON.stringify(e.data)))}}m.on("click",(function(){var e,t;k.clear(),e=x,t=h({height:600,width:600},f),e.terminate(),x=y(t)}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,