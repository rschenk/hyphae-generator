!function(e){var t={};function n(r){if(t[r])return t[r].exports;var a=t[r]={i:r,l:!1,exports:{}};return e[r].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)n.d(r,a,function(t){return e[t]}.bind(null,a));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=1)}([function(e,t,n){!function(e){var t=function(e){var t=Math.abs(e),n=1/(1+t/2),r=n*Math.exp(-t*t-1.26551223+n*(1.00002368+n*(.37409196+n*(.09678418+n*(n*(.27886807+n*(n*(1.48851587+n*(.17087277*n-.82215223))-1.13520398))-.18628806)))));return e>=0?r:2-r},n=function(e,t){if(t<=0)throw new Error("Variance must be > 0 (but was "+t+")");this.mean=e,this.variance=t,this.standardDeviation=Math.sqrt(t)};n.prototype.pdf=function(e){var t=this.standardDeviation*Math.sqrt(2*Math.PI);return Math.exp(-Math.pow(e-this.mean,2)/(2*this.variance))/t},n.prototype.cdf=function(e){return.5*t(-(e-this.mean)/(this.standardDeviation*Math.sqrt(2)))},n.prototype.ppf=function(e){return this.mean-this.standardDeviation*Math.sqrt(2)*function(e){if(e>=2)return-100;if(e<=0)return 100;for(var n=e<1?e:2-e,r=Math.sqrt(-2*Math.log(n/2)),a=-.70711*((2.30753+.27061*r)/(1+r*(.99229+.04481*r))-r),i=0;i<2;i++){var o=t(a)-n;a+=o/(1.1283791670955126*Math.exp(-a*a)-a*o)}return e<1?a:-a}(2*e)},n.prototype.mul=function(e){if("number"==typeof e)return this.scale(e);var t=1/this.variance,n=1/e.variance;return a(t+n,t*this.mean+n*e.mean)},n.prototype.div=function(e){if("number"==typeof e)return this.scale(1/e);var t=1/this.variance,n=1/e.variance;return a(t-n,t*this.mean-n*e.mean)},n.prototype.add=function(e){return r(this.mean+e.mean,this.variance+e.variance)},n.prototype.sub=function(e){return r(this.mean-e.mean,this.variance+e.variance)},n.prototype.scale=function(e){return r(this.mean*e,this.variance*e*e)};var r=function(e,t){return new n(e,t)},a=function(e,t){return r(t/e,1/e)};e(r)}((function(t){e.exports=t}))},function(e,t,n){"use strict";function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}n.r(t);var a=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.postMessage=t}var t,n,a;return t=e,(n=[{key:"clear",value:function(){this.postMessage({cmd:"render:clear"})}},{key:"line",value:function(e,t){this.postMessage({cmd:"render:line",from:e,to:t})}},{key:"node",value:function(e){this.postMessage({cmd:"render:node",center:e})}},{key:"root",value:function(e){this.postMessage({cmd:"render:root",center:e})}},{key:"done",value:function(){this.postMessage({cmd:"render:done"})}},{key:"minSeekRadius",set:function(e){this.postMessage({cmd:"render:setMinSeekRadius",radius:e})}},{key:"maxSeekRadius",set:function(e){this.postMessage({cmd:"render:setMaxSeekRadius",radius:e})}}])&&r(t.prototype,n),a&&r(t,a),e}();function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var u=function(){function e(t,n){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;i(this,e),this.width=t,this.height=n,this.maxRadius=a||.45*Math.min(t,n),this.minRadius=r||this.maxRadius/2,this.center={x:t/2,y:n/2}}var t,n,r;return t=e,(n=[{key:"canPlaceRoot",value:function(e,t){var n=s(this.center,{x:e,y:t}),r=(this.maxRadius-this.minRadius)/4,a=this.minRadius+r,i=this.maxRadius-r;return a<n&&n<i}},{key:"canPlaceNode",value:function(e,t){var n=s(this.center,{x:e,y:t});return this.minRadius<n&&n<this.maxRadius}}])&&o(t.prototype,n),r&&o(t,r),e}();function s(e,t){return n=c(e.x-t.x)+c(e.y-t.y),Math.sqrt(n);var n}function c(e){return e*e}var h=n(0),f=n.n(h)()(0,1),d=function(e,t){return Math.round(function(e,t){if(void 0===t&&(t=e,e=0),"number"!=typeof e||"number"!=typeof t)throw new TypeError("Expected all arguments to be numbers");return Math.random()*(t-e)+e}(e,t))};function l(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var m=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.height=n,this.width=t,this.zoneSize=r,this.widthZones=Math.ceil(t/r)+2,this.heightZones=Math.ceil(n/r)+2,this._zonemap=Array.from(new Array(this.numZones),(function(){return[]}))}var t,n,r;return t=e,(n=[{key:"zoneIndex",value:function(e,t){var n=Math.floor(e/this.zoneSize)+1;return(Math.floor(t/this.zoneSize)+1)*this.widthZones+n}},{key:"addItem",value:function(e,t,n){var r=this.zoneIndex(e,t);this._zonemap[r].push(n)}},{key:"getItemsInZone",value:function(e){this._zonemap[e]}},{key:"getAdjacentZoneIndexes",value:function(e,t){var n=this,r=this.zoneIndex(e,t),a=[r-1,r,r+1].map((function(e){return e-n.widthZones})),i=[r-1,r,r+1],o=[r-1,r,r+1].map((function(e){return e+n.widthZones}));return a.concat(i).concat(o)}},{key:"getItemsInAdjacentZones",value:function(e,t){var n=this;return this.getAdjacentZoneIndexes(e,t).map((function(e){return n._zonemap[e]})).flat()}},{key:"numZones",get:function(){return this.widthZones*this.heightZones}},{key:"zoneCoordinates",get:function(){var e=this;return Array.from(new Array(this.numZones),(function(t,n){var r=n%e.widthZones-1,a=Math.floor(n/e.widthZones)-1;return[r*e.zoneSize,a*e.zoneSize]}))}}])&&l(t.prototype,n),r&&l(t,r),e}();function p(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,a=!1,i=void 0;try{for(var o,u=e[Symbol.iterator]();!(r=(o=u.next()).done)&&(n.push(o.value),!t||n.length!==t);r=!0);}catch(e){a=!0,i=e}finally{try{r||null==u.return||u.return()}finally{if(a)throw i}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return v(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return v(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function v(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function y(e,t,n){var r,a=e.width,i=e.height,o=e.maxSeekRadius,u=e.minSeekRadius,s=e.seekRadiusDecay,c=e.numRoots,h=e.maxBranchAttempts,l=e.angleMax,v=e.branchSpacing,y=[],w=new m(a,i,1.5*o);n.minSeekRadius=u,n.maxSeekRadius=o,function(e,t,n,r,a){return Array.from(new Array(e)).map((function(){var e,r;do{e=d(t),r=d(n)}while(!a.canPlaceRoot(e,r));return[e,r]})).map((function(e,t){var n=p(e,2),a=M(n[0],n[1]);return a.r=r,a.theta=d(360),a.treeId=t,a}))}(c,i,a,o,t).forEach((function(e){y.push(e),w.addItem(e.x,e.y,e),n.root(e)}));for(var x=0;x<1e6;x++){var k=(r=y)[d(r.length-1)];if(k.alive)if(k.branchAttempts++,h<k.branchAttempts)k.alive=!1;else if(k.r<u)k.alive=!1;else{var S=M();S.parent=k,S.treeId=k.treeId,S.r=k.r+0,S.theta=k.theta,S.branchDepth=k.branchDepth,0<k.children.length&&(S.branchDepth++,S.r*=s),S.theta+=(1-1/Math.pow(S.branchDepth+1,.1))*f.ppf(Math.random())*l;var I=p(b(S.theta,k.r),2),R=I[0],A=I[1];S.x=k.x+R,S.y=k.y+A,g(S,t,w,v)&&(y.push(S),w.addItem(S.x,S.y,S),k.children.push(S),n.line(k,S))}}n.done()}function b(e,t){var n=e*Math.PI/180;return[Math.cos(n)*t,Math.sin(n)*t]}function g(e,t,n,r){return!!t.canPlaceNode(e.x,e.y)&&n.getItemsInAdjacentZones(e.x,e.y).map((function(t){var n=Math.sqrt(w(e.x-t.x)+w(e.y-t.y));return t.r+e.r<n*r})).every((function(e){return e}))}function w(e){return e*e}function M(e,t){return{x:e,y:t,r:1,theta:0,branchDepth:1,branchAttempts:0,parent:null,children:[],treeId:0,alive:!0}}onmessage=function(e){switch(console.log("[grow.worker] received message ".concat(e.data.cmd)),e.data.cmd){case"run":t=e.data.params,n=t.width,r=t.height,i=new a((function(e){return postMessage(e)})),o=new u(n,r,100,280),y(t,o,i);break;default:console.log("[grow.worker] unknown command ".concat(e.data.cmd,", data: ").concat(e.data))}var t,n,r,i,o}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,